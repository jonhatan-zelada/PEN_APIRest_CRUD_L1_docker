#https://github.com/ryanhill2/postgres-pgadmin-in-docker-compose-file/blob/main/docker-compose.yml
version: '3.4'

services:
# These are the configurations for our Node app
  # When Docker Compose starts this container it will automatically
  # use the Dockerfile in the directory to configure it
    app:
        build: .
        
        depends_on:
        # Our app does not work without our database
        # so this ensures our database is loaded first
        - postgresql_database
        ports:
        - "8085:8080"
        volumes:
        # Maps our current project directory `.` to
        # our working directory in the container
        - ./:/usr/src/app/
        # node_modules workaround for volumes
        # https://stackoverflow.com/a/32785014
        - /usr/src/app/node_modules

    # This is the configuration for our PostgreSQL database container
    # Note the `postgres` name is important, in out Node app when we refer
    # to  `host: "postgres"` that value is mapped on the network to the 
    # address of this container.


    postgresql_database:
        image: postgres:latest
        environment:
            - POSTGRES_USER=admin
            - POSTGRES_PASSWORD=admin1234
            - POSTGRES_DB=productDb
        ports: 
            - "5435:5432"
        restart: always
        volumes:
        # We are gonna create "2.PERN_Todo_Vol" volumen inside the folder "/Documentos/Docker_vol/", the route for sql it is always the same: /var/lib/postgresql/data
        - ~/Documentos/Docker_vol/2.PERN_Todo_Vol:/var/lib/postgresql/data/

    pgadmin:
        image: dpage/pgadmin4
        environment: 
            - PGADMIN_DEFAULT_EMAIL=pgadmin4@pgadmin.org
            - PGADMIN_DEFAULT_PASSWORD=admin1234
        ports:
            - '5055:80'
        restart: always
        volumes: 
            - ~/Documentos/Docker_vol/pgadmin:/root/.pgadmin
volumes:
    database-data:
    pgadmin: